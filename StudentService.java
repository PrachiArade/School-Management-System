package jpa.service;

import jpa.dao.StudentDAO;
import jpa.entitymodels.Course;
import jpa.entitymodels.Student;
import org.hibernate.query.criteria.internal.expression.NullLiteralExpression;

import javax.persistence.*;
import java.util.ArrayList;
import java.util.List;



 public class StudentService implements StudentDAO {



     EntityManagerFactory emf = Persistence.createEntityManagerFactory("school_db");
     EntityManager em = emf.createEntityManager();

    @Override
    public List<Student> getAllStudents() {

        //This method reads the student table in your database and returns the data as a List<Student>

       emf = Persistence.createEntityManagerFactory("school_db");
       em = emf.createEntityManager();
        try {
            Query query =em.createQuery("SELECT s FROM Student s");
            List<Student> studentList = query.getResultList();


            return studentList;
        }catch (NoResultException e){
            return null;}
    }




    @Override
    public Student getStudentByEmail(String sEmail) {

        //This method takes a Student’s email as a String and parses the student list for a Student with that email
        //and returns a Student Object.

        Student student=null;
        try {
            Query query = em.createQuery("SELECT s FROM Student s WHERE email = :email")
                    .setParameter("email",sEmail);
            student =(Student)query.getSingleResult();


        }catch (NullPointerException | NoResultException e1 ) {
            System.out.println("Student not found");

        }return student;
    }



    @Override
    public boolean validateStudent(String sEmail, String sPassword) {

        //This method takes two parameters: the first one is the user email and the second one is the password from the
        //user input. Return whether or not student was found.

        try {

            Student findStudent =em.find(Student.class,sEmail);
            if(findStudent.getsPass().equals(sPassword)) {

                return true;
            }
            else{
                return false;
            }



        }catch (NullPointerException  | NoResultException e) {
            System.out.println(" Given credentials are not valid");

        }return false;
    }



    @Override
    public void registerStudentToCourse(String sEmail, Integer cId) {

        //After a successful student validation, this method takes a Student’s email and a Course ID. It checks in
        //the join table (i.e. Student_Course) generated by JPA to find if a Student with that Email is currently
        //attending a Course with that ID.

        //If the Student is not attending that Course, register the student to that Course, otherwise not.

        try {
            em.getTransaction().begin();
            List<Course> studentCourseList = getStudentCourses(sEmail); //get all courses of registered students

            Student student =em.find(Student.class,sEmail); //find (logged/registered) student

            List<Course> courseList = new ArrayList<>(); //add registered courses to list
            courseList.addAll(studentCourseList);

            Query query =em.createNativeQuery("INSERT INTO studentcourse (email,cId) VALUES(?,?)");
            query.setParameter(1,sEmail);
            query.setParameter(2,cId);
            query.executeUpdate();
            em.getTransaction().commit();



        } catch (NullPointerException  | NoResultException e){
            System.out.println("Can't register to this course");

         }

    }



    @Override
    public List<Course> getStudentCourses(String sEmail) {
        try {
            //This method takes a Student’s Email as a parameter and would find all the courses a student is registered.

            Query query = em.createNativeQuery("Select course.* FROM course  " +
                    "JOIN studentcourse ON course.id=studentcourse.cId " +
                    "JOIN Student ON student.email=studentcourse.email " +
                    "WHERE Student.email = ?1 " +
                    "ORDER BY 1 ASC",Course.class);

            query.setParameter(1,sEmail);
                  List<Course> studentCourseList =query.getResultList();


                  return studentCourseList;

        }catch (NoResultException e) {

        }  return null;

        }




}
